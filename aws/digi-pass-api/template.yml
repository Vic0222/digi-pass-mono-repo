AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Deploy DigiPassApi Lambda
Parameters:
  ModuleName: #Name of the Lambda Module
    Description: The name of the .NET file
    Type: String
    Default: "DigiPassApi"



Resources:
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description: " Lambda execution role"
      RoleName: "LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service: "lambda.amazonaws.com"
            Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole #Permission to upload logs to CloudWatch
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite 
      Policies:
      - PolicyName: cloudwatchPutMetricData
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
            
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Digi Pass API"
      FunctionName: DigiPassApi
      Handler: bootstrap
      Runtime: provided.al2
      MemorySize: 128
      Architectures:
      - arm64
      Timeout: 30
      CodeUri: "../../digi-pass/target/lambda/digi-pass/"
      Role: !GetAtt LambdaIAMRole.Arn
      Policies:
      - AWSLambda_FullAccess
      Environment:
        Variables:
          MongoDbConfig__Database: DigiPassDb
          JwtConfig__Issuer: https://dev-8cvq4bjo02vym8zq.us.auth0.com/
          JwtConfig__Audience: http://localhost:3000/
          RUST_LOG: "info,digi_pass=debug"
          AWS_LAMBDA_HTTP_IGNORE_STAGE_IN_PATH: "true"
      Events:
        VersionResource:
          Type: Api
          Properties:
            Path: "/"
            Method: GET
            RestApiId:
              Ref: RestApi
        RootResources:
          Type: Api
          Properties:
            Path: "/{proxy+}"
            Method: ANY
            RestApiId:
              Ref: RestApi
            Auth:
              ApiKeyRequired: true   

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
    
  DigiPassAPIGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: !Ref ApiProdStage
      Description: Digi Pass API Usage Plan
      Throttle:
        BurstLimit: 1000
        RateLimit: 100
      UsagePlanName: DigiPassAPIUsagePlan

  # Enable ApiKey
  DigiPassAPIGatewayApiKey2:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: DigiPassAPIUsagePlan2
      Description: API Key for use with DigiPassAPIUsagePlan
      Enabled: 'true'
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: !Ref ApiProdStage

  DigiPassAPIGatewayApiKey2Usage:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      UsagePlanId: !Ref DigiPassAPIGatewayUsagePlan
      KeyType: API_KEY
      KeyId: !Ref DigiPassAPIGatewayApiKey2

  ApiDeployment2:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
      Description: "DigiPassAPIUsagePlan deployment"

  ApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiDeployment2

  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
      - >-
        arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  Account:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - APIGatewayRole
        - Arn